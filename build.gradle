buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        // if you use the version of cucumber-jvm that the plugin was built with
        classpath "info.cukes:cucumber-core:1.2.5"
        classpath "io.qameta.allure:allure-gradle:2.3"
    }
}

plugins {
    id "java"
    id "groovy"
    id "idea"
    id "com.github.samueltbrown.cucumber" version "0.9"
    id "com.energizedwork.idea-project-components" version "1.2"
    id "com.energizedwork.idea-base" version "1.2"
    id "com.energizedwork.webdriver-binaries" version "1.0"
}


ext {
    // The drivers we want to use
    drivers = ["firefox", "chrome"]
    ext {
        groovyVersion = '2.4.12'
        gebVersion = '2.1'
        seleniumVersion = '3.6.0'
        cucumberJvmVersion = '1.2.5'
        chromeDriverVersion = '2.32'
        geckoDriverVersion = '0.18.0'
        allureVersion = '2.6.0'
    }
}


repositories {
    jcenter()
}

dependencies {
    compile "org.codehaus.groovy:groovy-all:$groovyVersion"
    compile "org.gebish:geb-core:$gebVersion"
    compile "org.gebish:geb-testng:$gebVersion"
    compile "org.seleniumhq.selenium:selenium-api:$seleniumVersion"

    //Cucumber with Geb
    compile "info.cukes:cucumber-core:$cucumberJvmVersion"
    compile "info.cukes:cucumber-groovy:$cucumberJvmVersion"
    // this supplies some pre-built cucumber steps for driving Geb,
    // see https://github.com/tomdcc/geb-cucumber
    compile "io.jdev.geb:geb-cucumber:0.3"

    // pick whichever drivers you want. We test against most of them here.
    // see src/test/resources/GebConfig.groovy for how to switch between them
    compile "org.seleniumhq.selenium:selenium-java:$seleniumVersion"
    compile "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
    compile "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    compile "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"

    //Allure
    compile "io.qameta.allure:allure-testng:$allureVersion"
    compile "io.qameta.allure:allure-spock:$allureVersion"
    compile "io.qameta.allure:allure-assertj:$allureVersion"

    //Helper libraries
    compile group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '2.1.0'
    compile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    compile group: 'org.hamcrest', name: 'java-hamcrest', version: '2.0.0.0'
}


webdriverBinaries {
    chromedriver chromeDriverVersion
    geckodriver geckoDriverVersion
}

//Downloads, caches and configures the build to use a ChromeDriver binary
configureChromeDriverBinary {
    addBinaryAware { path ->
        tasks.cucumber.jvmOptions.systemProperties("webdriver.chrome.driver": path)
    }
}

//Downloads, caches and configures the build to use a GeckoDriver binary
configureGeckoDriverBinary {
    addBinaryAware { path ->
        tasks.cucumber.jvmOptions.systemProperties("webdriver.gecko.driver": path)
    }
}


apply plugin: 'io.qameta.allure'

allure {
    autoconfigure = true
    version = '2.6.0'
    useTestNG {
        version = "$allureVersion"
    }
    downloadLink = 'https://dl.bintray.com/qameta/generic/io/qameta/allure/allure/2.6.0/allure-2.6.0.zip'

}


cucumber {
    formats = [
            'pretty', // prints nice format out to the console
            'html:build/reports/cucumber', // html
            'junit:build/cucumber.xml' // junit format for integration with CI tool etc
    ]
    // src/cucumber/resources is included automatically
    glueDirs = [
            "classpath:io.jdev.geb.cucumber.steps.groovy.en"
    ]
    /*glueDirs = ['classpath:io.jdev.geb.cucumber.steps.groovy.en',
                'src/test/resources/env',
                'src/main/groovy/com/example/steps']
    featureDirs = ['src/test/resources/features']*/

}


tasks.cucumber {
    System.setProperty "geb.env", "chrome"
    dependsOn configureChromeDriverBinary, configureGeckoDriverBinary
    jvmOptions.systemProperties([
            "geb.cucumber.step.packages": "com.example.pages",
            "geb.env": System.getProperty("geb.env")
    ])
}

tasks.withType(GroovyCompile) {
    groovyOptions.forkOptions.memoryMaximumSize = '256m'
}

ideaProjectComponents {
    file "gradle/idea/ideaCodeStyle.xml"
}
