buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        // if you use the version of cucumber-jvm that the plugin was built with
        classpath "info.cukes:cucumber-core:1.2.5"
        classpath "io.qameta.allure:allure-gradle:2.3"
        classpath 'org.jsonschema2pojo:jsonschema2pojo-gradle-plugin:0.5.1'
    }
}

plugins {
    id "java"
    id "groovy"
    id "idea"
    id "eclipse"
    id "com.github.samueltbrown.cucumber" version "0.9"
    id "com.energizedwork.idea-project-components" version "1.2"
    id "com.energizedwork.idea-base" version "1.2"
    //id "com.energizedwork.webdriver-binaries" version "1.0"
}


ext {
    // The drivers we want to use
    drivers = ["firefox", "chrome"]
    ext {
        groovyVersion = '2.4.12'
        gebVersion = '2.1'
        seleniumVersion = '3.6.0'
        cucumberJvmVersion = '1.2.5'
        chromeDriverVersion = '2.32'
        geckoDriverVersion = '0.18.0'
        allureVersion = '2.6.0'
    }
}


repositories {
    jcenter()
}

dependencies {
    testCompile('junit:junit:4.12')
    compile "org.codehaus.groovy:groovy-all:$groovyVersion"
    compile "org.gebish:geb-core:$gebVersion"
    compile "org.gebish:geb-testng:$gebVersion"
    compile "org.seleniumhq.selenium:selenium-api:$seleniumVersion"

    //Cucumber with Geb
    compile "info.cukes:cucumber-core:$cucumberJvmVersion"
    compile "info.cukes:cucumber-groovy:$cucumberJvmVersion"
    // this supplies some pre-built cucumber steps for driving Geb,
    // see https://github.com/tomdcc/geb-cucumber
    compile "io.jdev.geb:geb-cucumber:0.3"

    // If using Spock, need to depend on geb-spock
    compile "org.gebish:geb-spock:$gebVersion"
    compile("org.spockframework:spock-core:1.1-groovy-2.4") {
        exclude group: "org.codehaus.groovy"
    }
    compile 'com.aoe:geb-spock-reports:0.1.5'
    compile 'com.athaydes:spock-reports:1.4.0', { transitive = false }
    //testRuntime('com.athaydes:spock-reports:1.2.7')

    // pick whichever drivers you want. We test against most of them here.
    // see src/test/resources/GebConfig.groovy for how to switch between them
    compile "org.seleniumhq.selenium:selenium-java:$seleniumVersion"
    compile "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
    compile "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    compile "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"

    //Allure
    compile "io.qameta.allure:allure-testng:$allureVersion"
    compile "io.qameta.allure:allure-spock:$allureVersion"
    compile "io.qameta.allure:allure-assertj:$allureVersion"

    //Helper libraries
    compile group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '2.1.0'
    compile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    compile group: 'org.hamcrest', name: 'java-hamcrest', version: '2.0.0.0'
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    compile group: 'org.slf4j', name: 'slf4j-jdk14', version: '1.7.22'
    // recommended for logging
    compile 'org.slf4j:slf4j-api:1.7.13'
    compile 'org.slf4j:slf4j-simple:1.7.13'

    //Http builder with Json and JsonSchema2Pojo
    compile group: 'org.codehaus.groovy.modules.http-builder', name: 'http-builder', version: '0.7.1'
    compile 'commons-lang:commons-lang:2.6'
    compile 'javax.validation:validation-api:1.1.0.CR2'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.1.4'

}


task wrapper(type: Wrapper) {
    gradleVersion = '4.0'
    jarFile = './gradle/wrapper/gradle-wrapper.jar'
}


apply plugin: 'jsonschema2pojo'

jsonSchema2Pojo {
    // Location of the JSON Schema file(s). This may refer to a single file or a directory of files.
    source = files("${sourceSets.main.output.resourcesDir}/json")

    // Target directory for generated Java source files. The plugin will add this directory to the
    // java source set so the compiler will find and compile the newly generated source files.

    //targetDirectory = file("${project.buildDir}/generated-sources/js2p")
    targetDirectory = file("src/main/groovy/com/example/pojo")

    // Package name used for generated Java classes (for types where a fully qualified name has not
    // been supplied in the schema using the 'javaType' property).
    targetPackage = ''

    // The type of input documents that will be read. Supported values:
    //  - jsonschema (schema documents, containing formal rules that describe the structure of json data)
    //  - json (documents that represent an example of the kind of json data that the generated Java types
    //          will be mapped to)
    sourceType = 'json'
    // Generate json schema - ./gradlew generateJsonSchema2Pojo
}




/**
 * Configure the webdriver binaries (use plugin com.energizedwork.webdriver-binaries )
 */
/*webdriverBinaries {
    chromedriver chromeDriverVersion
    geckodriver geckoDriverVersion
}

//Downloads, caches and configures the build to use a ChromeDriver binary
configureChromeDriverBinary {
    addBinaryAware { path ->
        tasks.cucumber.jvmOptions.systemProperties("webdriver.chrome.driver": path)
    }
}

//Downloads, caches and configures the build to use a GeckoDriver binary
configureGeckoDriverBinary {
    addBinaryAware { path ->
        tasks.cucumber.jvmOptions.systemProperties("webdriver.gecko.driver": path)
    }
}*/



apply plugin: 'io.qameta.allure'

allure {
    autoconfigure = true
    version = '2.6.0'
    useTestNG {
        version = "$allureVersion"
    }
    downloadLink = 'https://dl.bintray.com/qameta/generic/io/qameta/allure/allure/2.6.0/allure-2.6.0.zip'

}

import io.qameta.allure.gradle.task.AllureReport

task allureAggregatedReport(type: AllureReport) {
    allure.resultsDir
}



cucumber {
    formats = [
            'pretty', // prints nice format out to the console
            'html:build/reports/cucumber', // html
            'junit:build/cucumber.xml' // junit format for integration with CI tool etc
    ]
    // src/cucumber/resources is included automatically
    glueDirs = [
            "classpath:io.jdev.geb.cucumber.steps.groovy.en"
    ]
    /*glueDirs = ['classpath:io.jdev.geb.cucumber.steps.groovy.en',
                'src/test/resources/env',
                'src/main/groovy/com/example/steps']
    featureDirs = ['src/test/resources/features']*/
}


/**
 * Cucumber task with generating drivers from webdriver-binaries
 */
/*tasks.cucumber {
    dependsOn configureChromeDriverBinary, configureGeckoDriverBinary
    jvmOptions.systemProperties([
            "geb.cucumber.step.packages": "com.example.pages",
            "geb.env": System.getProperty("geb.env"),
    ])
}*/

/**
 * Default task with generating drivers from WebrdriverManager
 */
tasks.cucumber {
    System.setProperty "geb.env", "chrome"
    jvmOptions.systemProperties([
            "geb.cucumber.step.packages": "com.example.pages",
            "geb.env": System.getProperty("geb.env"),
    ])
}




clean.doFirst {
    delete "${rootDir}/.allure"
    delete "${rootDir}/allure-results"
    delete "${rootDir}/target"
    delete "${rootDir}/build"
    delete "${rootDir}/video"
    delete "${rootDir}/out"
    delete "${rootDir}/src/main/resources/logs/log_file.log"
    delete "${rootDir}/src/main/resources/logs/test_log.log"
    delete "${rootDir}/src/main/resources/logs/all_logs.log"
    delete "${rootDir}/src/main/groovy/com/example/pojo"

}


test{
    systemProperty "file.encoding", "utf-8"
    systemProperty "log4j.configuration", "file:///path/to/log4j.properties"
    systemProperties "geb.build.reportsDir": "$reportsDir/geb"
    useTestNG() {
        //file("src/test/groovy/ui/SpokTests.groovy")
        suiteXmlFiles << new File("src/test/resources/", "suite.xml")
    }
}
test.finalizedBy allureAggregatedReport


drivers.each { driver ->
    task "${driver}Test"(type: Test) {
        systemProperty "log4j.configuration", "file:///path/to/log4j.properties"
        systemProperty "geb.env", "${driver}"
        systemProperties "geb.build.reportsDir": "$reportsDir/geb"
        useTestNG() {
            suiteXmlFiles << new File("src/test/resources/", "suite.xml")
        }
    }
}
drivers.collect { tasks["${it}Test"].finalizedBy allureAggregatedReport }


drivers.each { driver ->
        task "${driver}Spock"(type: Test) {
            systemProperty 'com.athaydes.spockframework.report.showCodeBlocks', true
            systemProperty 'com.athaydes.spockframework.report.outputDir', 'build/reports/spock'
            systemProperty 'com.athaydes.spockframework.report.projectName', 'Google Project'
            systemProperty 'com.athaydes.spockframework.report.projectVersion', '8.3'
            systemProperty 'com.athaydes.spockframework.report.testSourceRoots', 'src/test/groovy'
            systemProperty 'com.athaydes.spockframework.report.internal.HtmlReportCreator.printThrowableStackTrace', false
            systemProperty 'com.athaydes.spockframework.report.hideEmptyBlocks', false

            systemProperty "testDriver", "${driver}"
            systemProperty "test.single", "AcceptanceTests.groovy"
        }
    }
drivers.collect { tasks["${it}Spock"].finalizedBy allureAggregatedReport }



task apiTest(type: Test){
    useTestNG(){
        suiteXmlFiles << new File("src/test/resources/", "suiteApi.xml")
    }
}
apiTest.finalizedBy allureAggregatedReport




tasks.withType(Test) {
    maxHeapSize = "1g"
    jvmArgs '-XX:MaxMetaspaceSize=128m'
    testLogging {
        exceptionFormat = 'full'
    }
}

tasks.withType(GroovyCompile) {
    groovyOptions.forkOptions.memoryMaximumSize = '256m'
}


ideaProjectComponents {
    file "gradle/idea/ideaCodeStyle.xml"
}

